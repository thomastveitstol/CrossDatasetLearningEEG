Shared Dataset Details:
  num_time_steps: &num_time_steps 5000
  time_series_start: &time_series_start null

Training:
  learning_rate: [ 0.005, 0.001, 0.0005, 0.0001 ]
  batch_size: 16
  num_epochs: 200
  verbose: true
  val_split: 0.2
  loss: [ MSELoss, L1Loss ]
  metrics: regression
  target: age
  Scalers:
    target:
      name: ZNormalisation
      kwargs: { }
  Data Split:
    name: SplitOnDataset
    kwargs:
      seed: 42
  Datasets:
    rockhill:
      num_subjects: 15
      num_time_steps: *num_time_steps
      time_series_start: *time_series_start
    miltiadous:
      num_subjects: 15
      num_time_steps: *num_time_steps
      time_series_start: *time_series_start
    hatlestad_hall:
      num_subjects: 15
      num_time_steps: *num_time_steps
      time_series_start: *time_series_start
    yulin_wang:
      num_subjects: 15
      num_time_steps: *num_time_steps
      time_series_start: *time_series_start
    ous:
      num_subjects: 15
      num_time_steps: *num_time_steps
      time_series_start: *time_series_start
    cau_eeg:
      num_subjects: 15
      num_time_steps: *num_time_steps
      time_series_start: *time_series_start

# -----------------
# Methods for handling a varied number of channels
# -----------------
box: &box
  x_min: -0.17
  x_max: 0.17
  y_min: -0.17
  y_max: 0.17

# Pooling methods
MultiCSSharedRocket: &MultiCSSharedRocket
  num_kernels: [250, 500, 1000, 5000]
  max_receptive_field: [75, 100, 250]

MultiMSSharedRocketHeadRegion: &MultiMSSharedRocketHeadRegion
  num_kernels: [ 250, 500, 1000, 5000 ]
  max_receptive_field: [ 75, 100, 250 ]
  latent_search_features: [ 16, 32, 64 ]
  share_search_receiver_modules: [ true, false]

PoolingModules: &PoolingModules
  MultiCSSharedRocket: *MultiCSSharedRocket
  MultiMSSharedRocketHeadRegion: *MultiMSSharedRocketHeadRegion

# Montage splits  todo: update the kwargs
VoronoiSplit: &VoronoiSplit
  channel_systems: [ [ rockhill, miltiadous, hatlestad_hall, yulin_wang, cau_eeg ] ]
  min_nodes: 1  # todo: other values must be implemented
  num_initial_centroids: [ 100, 250, 500 ]
  <<: *box

CentroidPolygons: &CentroidPolygons
  channel_positions: [ [ cau_eeg ] ]
  min_nodes: [1, 2, 3, 4, 5]
  k: [[2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3, 3], [2, 3, 2, 3, 2, 3, 2, 3, 2], [4, 3, 2, 3, 4, 3, 2, 3, 4]]

MontageSplits: &MontageSplits
  VoronoiSplit: *VoronoiSplit
  CentroidPolygons: *CentroidPolygons

RegionBasedPooling: &RegionBasedPooling
  normalise_region_representations: [ true, false ]
  num_montage_splits:
    min: 3
    max: 70
  share_all_pooling_modules: [ true, false ]
  num_pooling_modules: [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
  RBPDesign:
    num_designs: 1
    pooling_type: multi_cs
    pooling_module: *PoolingModules
    montage_split: *MontageSplits

# Interpolation
SphericalSplineInterpolation: &SphericalSplineInterpolation [ HatlestadHall, YulinWang ]

Varied Numbers of Channels:
  RegionBasedPooling: *RegionBasedPooling
  SphericalSplineInterpolation: *SphericalSplineInterpolation


# -----------------
# Deep learning architectures
# TODO: I have to check the hyperparameters, of the braindecode models in particular
# -----------------
InceptionNetwork: &InceptionNetwork
  num_classes: 1
  cnn_units: [ 16, 32, 64  ]
  depth: [ 4, 6, 8, 10 ]

EEGNetv4MTS: &EEGNetv4MTS
  num_classes: 1
  num_time_steps: *num_time_steps
  kernel_length: [ 16, 32, 64 ]

EEGResNetMTS: &EEGResNetMTS
  num_classes: 1
  num_time_steps: *num_time_steps
  n_layers_per_block: [ 2, 3, 4 ]
  first_filter_length: [ 3, 5, 7 ]

ShallowFBCSPNetMTS: &ShallowFBCSPNetMTS
  num_classes: 1
  num_time_steps: *num_time_steps
  n_filters_time: [ 15, 25, 35 ]
  n_filters_spat: [ 15, 25, 35 ]

Deep4NetMTS: &Deep4NetMTS
  num_classes: 1
  num_time_steps: *num_time_steps
  n_filters_time: [ 20, 40, 60 ]
  filter_time_length: [ 15, 25, 35 ]
  n_filters_spat: [ 20, 40, 60 ]
  split_first_layer: [ true, false ]
  batch_norm: [ true, false ]
  drop_prob: [ 0.1, 0.25, 0.5 ]
  n_filters_2: [ 50, 100, 200 ]
  n_filters_3: [ 50, 100, 200 ]
  n_filters_4: [ 50, 100, 200 ]
  filter_length_2: [ 5, 10, 20 ]
  filter_length_3: [ 5, 10, 20 ]
  filter_length_4: [ 5, 10, 20 ]

MTS Module:
  InceptionNetwork: *InceptionNetwork
  EEGNetv4MTS: *EEGNetv4MTS
  EEGResNetMTS: *EEGResNetMTS
  ShallowFBCSPNetMTS: *ShallowFBCSPNetMTS
  Deep4NetMTS: *Deep4NetMTS
